# Professional, production-grade CI/CD pipeline for the PSOR project
# Updated to use Docker Compose plugin (docker compose) on ubuntu-latest
name: PSOR CI/CD Pipeline

# --- TRIGGERS ---
on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

# --- JOBS ---
jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Build all services using modern Docker Compose plugin
      - name: Build All Polyglot Services
        run: docker compose build

      # Step 4: Prepare test artifact directory
      - name: Prepare Test Artifact Directory
        run: mkdir -p ./reports && rm -f ./reports/*

      # Step 5: Run the orchestration test playbook and capture exit code
      - name: Run Orchestration Test Playbook
        id: playbook-run
        continue-on-error: true
        run: |
          docker compose run --rm orchestrator
          echo "exit_code=$?" >> $GITHUB_OUTPUT

      # Step 6a: Verify expected playbook failure
      - name: Verify Expected Playbook Failure
        if: steps.playbook-run.outputs.exit_code == '1'
        run: echo "Playbook failed as expected. This is a successful test run."

      # Step 6b: Fail if playbook did not behave as expected
      - name: Fail if Playbook Did Not Behave as Expected
        if: steps.playbook-run.outputs.exit_code != '1'
        run: |
          echo "::error::The test playbook was expected to fail with exit code 1, but it did not."
          echo "Exit code was '${{ steps.playbook-run.outputs.exit_code }}'."
          exit 1

      # Step 7: Upload audit log and reports
      - name: Upload Execution Report and Audit Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: PSOR-Execution-Report
          path: ./reports/
